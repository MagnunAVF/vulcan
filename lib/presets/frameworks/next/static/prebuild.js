import { exec } from '#utils';
import {
  readdir, stat, rename, mkdir,
} from 'fs/promises';
import {
  join, extname, basename, dirname,
} from 'path';

/**
 * Moves HTML and corresponding TXT files to subdirectories and
 * renames the HTML files to 'index.html'.
 * This function is used to organize the static files generated by Next.js during the build process.
 * It looks for HTML files in the specified directory and its subdirectories.
 * When it finds an HTML file,
 * it creates a new subdirectory with the same name as the HTML file (without the .html extension),
 * and moves the HTML file to that subdirectory, renaming it to 'index.html'.
 * If there is a corresponding TXT file with the same base name (before .html extension),
 * it will also be moved
 * to the same subdirectory with its original name.
 * @param {string} directory - The root directory to start moving files.
 * @example
 * // Before:
 * // Root directory: '/path/to/project/.edge/statics'
 * // Files in the directory: ['home.html', 'about.html', 'contact.html', 'styles.css']
 *
 * // After calling moveFiles('/path/to/project/.edge/statics'):
 * // Root directory: '/path/to/project/.edge/statics'
 * // Files in the directory: ['styles.css']
 * // Subdirectory 'home':
 * //   - index.html (previously home.html)
 * //   - home.txt
 * // Subdirectory 'about':
 * //   - index.html (previously about.html)
 * //   - about.txt
 * // Subdirectory 'contact':
 * //   - index.html (previously contact.html)
 * //   - contact.txt
 */
async function moveFiles(directory) {
  const files = await readdir(directory);

  await Promise.all(files.map(async (file) => {
    const filePath = join(directory, file);
    const fileStat = await stat(filePath);

    if (fileStat.isDirectory()) {
      await moveFiles(filePath); // Recursive call for subdirectories
    } else if (extname(file) === '.html' && file !== 'index.html' && file !== '404.html') {
      const newDirectoryName = basename(file, '.html');
      const newDirectoryPath = join(directory, newDirectoryName);

      await mkdir(newDirectoryPath, { recursive: true });

      const newHTMLPath = join(newDirectoryPath, 'index.html');
      await rename(filePath, newHTMLPath);
      console.log(`Moved ${filePath} to ${newHTMLPath}`);

      const correspondingTXTFile = `${basename(file, '.html')}.txt`;
      const correspondingTXTPath = join(directory, correspondingTXTFile);

      if (files.includes(correspondingTXTFile)) {
        const newTXTParentDirectory = dirname(newHTMLPath);
        const newTXTPath = join(newTXTParentDirectory, correspondingTXTFile);
        await rename(correspondingTXTPath, newTXTPath);
        console.log(`Moved ${correspondingTXTPath} to ${newTXTPath}`);
      }
    }
  }));
}

/**
 * Runs custom prebuild actions.
 */
async function prebuild() {
  try {
    console.log('Starting Next.js build process...');
    await exec('yarn run build', true);

    console.log('Adapting Next.js build output...');
    await moveFiles(`${process.cwd()}/.edge/statics`);

    console.log('Next.js build adaptation completed successfully.');
  } catch (error) {
    console.error('Error occurred during Next.js build adaptation:', error);
  }
}

export default prebuild;
